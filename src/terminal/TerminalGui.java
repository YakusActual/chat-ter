/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package terminal;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 *
 * @author Yakus
 */
public class TerminalGui extends javax.swing.JFrame {

    /**
     * Creates new form TerminalGui
     */
    
    Server server;
    String ip;
    
    public TerminalGui() {
        initComponents();
        setTitle("Terminal");
        setLocationRelativeTo(null);
        terminalCommands.requestFocus();
        terminalHistory.append("Building server...\n");
        server = new Server();
        terminalHistory.append("Starting server...\n");
        server.start();
        terminalHistory.append("Server Started, getting status...\n");
        terminalHistory.append("Server status..." + server.getStatus() + "\n");
        terminalHistory.append("Listening on port " + server.getPortNumber() + "\n");
        terminalHistory.append("Done\n");
        terminalHistory.append("Type '/help' for all available commands\n");
        terminalHistory.append("-------------------------------------------------------------------------\n");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        terminalHistory = new javax.swing.JTextArea();
        terminalCommands = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        terminalHistory.setEditable(false);
        terminalHistory.setColumns(20);
        terminalHistory.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        terminalHistory.setLineWrap(true);
        terminalHistory.setRows(5);
        jScrollPane1.setViewportView(terminalHistory);

        terminalCommands.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                terminalCommandsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(terminalCommands)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(terminalCommands, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void terminalCommandsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_terminalCommandsActionPerformed
        String strCommand = terminalCommands.getText();
        char charCommand[] = strCommand.toCharArray();
        
        if(charCommand[0] == '/'){
            String command;
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < charCommand.length; i++){
                sb.append(charCommand[i]);
            }
            command = sb.toString();
            
            if (command.equals("/exit")){
                System.exit(0);
            } /*else if (command.equals("/isBound")) {
                terminalHistory.append("> " + server.getIsBound() + "\n");
                terminalCommands.setText("");
                terminalCommands.requestFocus();
            }*/ else {
                CommandsManager arg = new CommandsManager(command);
                terminalHistory.append("> " + command + "\n");
                String result = arg.executeCommand();
                terminalHistory.append(result);
                terminalCommands.setText("");
                terminalCommands.requestFocus();
            }
        } else {
            if (server.isBound) {
                SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                String time = sdf.format(new Date());
                CommandsManager.tc.out.println(strCommand);
                terminalHistory.append("You: [" + time + "] " + strCommand + "\n");
                terminalCommands.setText("");
                terminalCommands.requestFocus();
            } else {
                terminalHistory.append("> " + strCommand + "\n");
                terminalHistory.append("Unknown command, please type '/help' for available commands\n");
                terminalCommands.setText("");
                terminalCommands.requestFocus();
            }
        }
        
        
    }//GEN-LAST:event_terminalCommandsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TerminalGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TerminalGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TerminalGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TerminalGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TerminalGui().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField terminalCommands;
    protected static javax.swing.JTextArea terminalHistory;
    // End of variables declaration//GEN-END:variables
}